#include <gtest/gtest.h>
#include <packet/packet.h>
//#include <packet_private.h>

/* eth:pppoe:ppp:ip4:tcp */
const uint8_t pkt10[] = {
    0x02, 0x09, 0x08, 0x07, 0x06, 0x05, 0x02, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x88, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0xC0,
    0x00, 0x21, 0x45, 0x00, 0x00, 0xBE, 0x00, 0x06, 0x00, 0x00,
    0x40, 0x06, 0x5C, 0x21, 0x0A, 0x01, 0x02, 0x03, 0x0A, 0x09,
    0x08, 0x07, 0xBD, 0xEC, 0x00, 0x08, 0x00, 0x00, 0x01, 0xC4,
    0x00, 0x00, 0x00, 0x02, 0x50, 0x18, 0x01, 0x00, 0xC8, 0xB2,
    0x00, 0x00, 0x6C, 0x2C, 0x20, 0x77, 0x65, 0x20, 0x64, 0x69,
    0x64, 0x20, 0x64, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x2E, 0x0A, 0x47, 0x4F, 0x52,
    0x45, 0x3A, 0x20, 0x54, 0x68, 0x65, 0x20, 0x68, 0x65, 0x61,
    0x64, 0x65, 0x72, 0x3F, 0x0A, 0x42, 0x49, 0x44, 0x45, 0x4E,
    0x3A, 0x20, 0x41, 0x6E, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x74, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x2D, 0x2D,
    0x20, 0x62, 0x75, 0x74, 0x20, 0x73, 0x68, 0x65, 0x20, 0x69,
    0x73, 0x20, 0x61, 0x20, 0x70, 0x61, 0x63, 0x6B, 0x65, 0x74,
    0x21, 0x0A, 0x43, 0x52, 0x4F, 0x57, 0x44, 0x3A, 0x20, 0x52,
    0x6F, 0x75, 0x74, 0x65, 0x20, 0x68, 0x65, 0x72, 0x21, 0x20,
    0x20, 0x50, 0x61, 0x63, 0x6B, 0x65, 0x74, 0x21, 0x20, 0x20,
    0x50, 0x61, 0x63, 0x6B, 0x65, 0x74, 0x21, 0x20, 0x20, 0x52,
    0x6F, 0x75, 0x74, 0x65, 0x20, 0x68, 0x65, 0x72, 0x21, 0x0A,
    0x47, 0x4F, 0x52, 0x45, 0x3A, 0x20, 0x44, 0x69, 0x64, 0x20,
    0x79, 0x6F
};

TEST(PacketDecodeTest, WithNullPacket)
{
    Packet *packet = packet_create();

    int err = packet_decode(NULL, pkt10, sizeof(pkt10));

    ASSERT_TRUE(packet != NULL);
    ASSERT_TRUE(err != 0);

    packet_destroy(packet);
}

TEST(PacketDecodeTest, WithNullDataPointer)
{
    Packet *packet = packet_create();

    int err = packet_decode(packet, NULL, sizeof(pkt10));

    ASSERT_TRUE(err != 0);

    packet_destroy(packet);
}

TEST(PacketDecodeTest, WithZeroSize)
{
    Packet *packet = packet_create();

    int err = packet_decode(packet, pkt10, 0);

    ASSERT_TRUE(err != 0);

    packet_destroy(packet);
}

TEST(PacketDecodeTest, ProtoCount)
{
    Packet *packet = packet_create();

    int err = packet_decode(packet, pkt10, sizeof(pkt10));

    ASSERT_TRUE(err == 0);

    err = packet_proto_count(packet);
    ASSERT_EQ(err, 5);

    unsigned i;
    Protocol *proto = packet_proto_first(packet, &i);
    ASSERT_EQ(packet_proto_proto(proto), PROTO_ETH);

    proto = packet_proto_next(packet, &i);
    ASSERT_EQ(packet_proto_proto(proto), PROTO_PPPOE);

    proto = packet_proto_next(packet, &i);
    ASSERT_EQ(packet_proto_proto(proto), PROTO_PPP);

    proto = packet_proto_next(packet, &i);
    ASSERT_EQ(packet_proto_proto(proto), PROTO_IP4);

    proto = packet_proto_next(packet, &i);
    ASSERT_EQ(packet_proto_proto(proto), PROTO_TCP);

    packet_destroy(packet);
}

int main(int argc, char** argv)
{
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
